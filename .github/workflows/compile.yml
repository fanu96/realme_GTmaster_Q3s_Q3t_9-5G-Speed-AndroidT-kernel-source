name: Build Android Kernel

on:
  push:
    branches: master
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest

    env:
      DEFCONFIG: lahaina_defconfig
      KERNEL_ARCH: arm64
      CLANG_VERSION: clang-r383902
      MY_WORKSPACE: ${{ github.workspace }}/ws # Using github.workspace as the base

    steps:
    # Free up space first
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@v10
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        # remove-swift: 'true' # Consider removing other large unused tools

    # Install essential build dependencies AFTER maximizing space
    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends bc bison build-essential cpio flex gcc git kmod libssl-dev libelf-dev python3 rsync unzip wget zip

    - name: Checkout kernel source (Shallow Clone)
      uses: actions/checkout@v4
      with:
        path: ${{ env.MY_WORKSPACE }}/source/msm-5.4
        fetch-depth: 1

    - name: Set up directories
      run: |
        mkdir -p ${{ env.MY_WORKSPACE }}/source/prebuilts
        mkdir -p ${{ env.MY_WORKSPACE }}/source/kernel_out

    - name: Clone prebuilt tools (Shallow Clone)
      run: |
        cd ${{ env.MY_WORKSPACE }}/source/prebuilts
        echo "Cloning build-tools..."
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/build-tools
        echo "Cloning clang host..."
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86
        echo "Cloning gcc..."
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9
        echo "Cloning complete."
        df -h # Check disk space immediately after cloning

        # Correctly export environment variables using fixed paths
    - name: Export environment variables
      run: |
        echo "Setting environment variables..."
        echo "SOURCE_ROOT=${{ env.MY_WORKSPACE }}/source" >> $GITHUB_ENV
        echo "PREBUILTS_PATH=${{ env.MY_WORKSPACE }}/source/prebuilts" >> $GITHUB_ENV
        # --- Construct full paths directly ---
        echo "MAKE_PATH=${{ env.MY_WORKSPACE }}/source/prebuilts/build-tools/linux-x86/bin" >> $GITHUB_ENV
        echo "GCC_TOOLCHAIN_PATH=${{ env.MY_WORKSPACE }}/source/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9" >> $GITHUB_ENV # <-- ADDED Base path for GCC
        echo "GCC_BIN_PATH=${{ env.GCC_TOOLCHAIN_PATH }}/bin" >> $GITHUB_ENV # Convenience for PATH
        echo "GCC_CROSS_COMPILE=${{ env.GCC_BIN_PATH }}/aarch64-linux-android-" >> $GITHUB_ENV
        echo "CLANG_PATH=${{ env.MY_WORKSPACE }}/source/prebuilts/clang/host/linux-x86/${{ env.CLANG_VERSION }}/bin" >> $GITHUB_ENV
        echo "CLANG_TOOL_PATH=${{ env.MY_WORKSPACE }}/source/prebuilts/clang/host/linux-x86/${{ env.CLANG_VERSION }}" >> $GITHUB_ENV
        # --- Kernel specific paths ---
        echo "KERNEL_DIR=${{ env.MY_WORKSPACE }}/source/msm-5.4" >> $GITHUB_ENV
        echo "OUT_DIR=${{ env.MY_WORKSPACE }}/source/kernel_out" >> $GITHUB_ENV
        # --- Build variables ---
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
        # Prepend all tool paths to PATH
        echo "PATH=${{ env.GCC_BIN_PATH }}:${{ env.CLANG_PATH }}:${{ env.MAKE_PATH }}:$PATH" >> $GITHUB_ENV

    - name: Verify Paths and Tools
      run: |
        echo "--- Environment Variables ---"
        # Include GCC_TOOLCHAIN_PATH in verification
        env | grep -E 'SOURCE_ROOT|PREBUILTS_PATH|MAKE_PATH|GCC_TOOLCHAIN_PATH|GCC_BIN_PATH|GCC_CROSS_COMPILE|CLANG_PATH|CLANG_TOOL_PATH|KERNEL_DIR|OUT_DIR|ARCH|CROSS_COMPILE|CLANG_TRIPLE' | sort
        echo "--- Checking Tool Paths ---"
        ls -l $MAKE_PATH/make || echo "Make not found!"
        ls -l ${GCC_CROSS_COMPILE}gcc || echo "GCC cross-compiler not found!"
        ls -l ${GCC_CROSS_COMPILE}ld || echo "GCC cross-linker not found!" # <-- ADDED Check for ld
        ls -l $CLANG_PATH/clang || echo "Clang compiler not found!"
        echo "--- PATH ---"
        echo "$PATH"
        echo "--- Checking Tool Versions ---"
        make --version || echo "Make check failed!"
        ${GCC_CROSS_COMPILE}gcc --version || echo "GCC check failed!"
        clang --version || echo "Clang check failed!"
        df -h # Check disk space before build

    - name: Build Kernel (defconfig)
      run: |
        cd $KERNEL_DIR
        echo "Running make defconfig..."
        # Add --gcc-toolchain flag to CC
        make O=$OUT_DIR ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CLANG_TRIPLE=$CLANG_TRIPLE \
          CC="clang --gcc-toolchain=${{ env.GCC_TOOLCHAIN_PATH }}" \
          HOSTCC="clang" \
          $DEFCONFIG

    - name: Build Kernel (Image & DTBs)
      run: |
        cd $KERNEL_DIR
        echo "Running make kernel image and DTBs..."
        # Add --gcc-toolchain flag to CC
        make -j$(nproc) O=$OUT_DIR ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CLANG_TRIPLE=$CLANG_TRIPLE \
          CC="clang --gcc-toolchain=${{ env.GCC_TOOLCHAIN_PATH }}" \
          HOSTCC="clang"
        echo "Build finished."
        df -h # Check disk space immediately after build

    # ... (rest of the workflow remains the same) ...

    - name: Check Disk Usage After Build
      if: always() # Run even if build fails to see state
      run: |
        echo "--- Overall Disk Usage ---"
        df -h
        echo "--- Workspace Directory Usage ---"
        du -sh ${{ env.MY_WORKSPACE }}/* || true
        echo "--- Kernel Output Directory Usage ---"
        du -sh ${{ env.OUT_DIR }} || true

    - name: Upload Kernel Artifacts
      uses: actions/upload-artifact@v4
      if: success() # Only upload if build succeeds
      with:
        name: kernel-build-${{ github.run_id }} # Unique name per run
        path: |
          ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image*
          ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dts/**/*.dtb
          ${{ env.OUT_DIR }}/.config
          # Optional: Upload full output dir for debugging failures
          # ${{ env.OUT_DIR }}
